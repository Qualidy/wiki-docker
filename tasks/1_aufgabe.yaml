title: 1. Übung

question: |

  ## 1. Aufgabe

  Erkläre die folgenden Begriffe in eigenen Worten:
  
  - Docker Image
  
  - Docker Container
  
  - Dockerfile

  ## 2. Aufgabe

  Führe die folgenden Befehle im Terminal aus und beschreibe, was sie jeweils tun:

  ```bash
  docker pull hello-world
  docker run hello-world
  docker image ls
  docker ps -a
  ```

  Beantworte danach:
  
  - Wie viele Images und wie viele Container siehst du?
  
  - Welche Unterschiede fallen dir bei docker image ls vs. docker ps -a auf?

  ## 3. Aufgabe

  Beschreibe mit eigenen Worten, warum es sinnvoll ist, in Docker zwischen Images und Containern zu unterscheiden. 
  Welche Vorteile bringt diese Trennung im Vergleich zu klassischen Installationen?

  ## 4. Aufgabe

  1. Erkläre mit eigenen Worten, was Docker ist und wofür es verwendet wird.
  
  2. Warum verwendet man Container in der Softwareentwicklung? Nenne mindestens drei Vorteile von Containern gegenüber klassischer Softwareinstallation.
  
  3. Warum verwendet man Container in der Softwareentwicklung? Nenne mindestens drei Vorteile von Containern gegenüber klassischer Softwareinstallation.
  
  4. Welche Rolle spielt das Dockerfile? Was beschreibt es?
  
  5. Was versteht man unter dem Begriff "Port-Mapping" in Docker?
  
  6. Was passiert beim Befehl `docker pull nginx`?
  
  7. Wie kann man alle laufenden Container anzeigen? Wie auch gestoppte?
  
  8. Was passiert, wenn man versucht, denselben Container mit `docker run` erneut zu starten?
  
  9. Wie kann man einen gestoppten Container löschen?

  ## 5. Aufgabe

  Was bewirkt der folgende Befehl:

  ```bash
  docker run -d -p 8080:80 nginx
  ```

  Erkläre die Bedeutung der einzelnen Optionen.

  ## 6. Aufgabe

  1. Was unterscheidet Docker von einer klassischen virtuellen Maschine (VM)?
  
  2. Wie hilft Docker in einem Entwicklerteam mit unterschiedlichen Betriebssystemen?
  
  3. Wie stellt Docker sicher, dass eine Anwendung überall gleich funktioniert?
  
  4. Was sind potenzielle Herausforderungen oder Risiken bei der Arbeit mit Docker?
  
  5. Wann ist es sinnvoll, ein eigenes Image zu erstellen statt ein fertiges zu verwenden?

  ## 7. Aufgabe

  Ordne den Begriff der richtigen Bedeutung zu:

  | Begriff           | Bedeutung                                        |
  | ----------------- | ------------------------------------------------ |
  | `docker ps`       | A. Zeigt laufende Container                      |
  | `docker build`    | B. Erstellt ein Image aus einem Dockerfile       |
  | `docker rm`       | C. Löscht einen Container                        |
  | `docker image ls` | D. Zeigt vorhandene Images                       |
  | `docker run`      | E. Startet einen neuen Container aus einem Image |

  ## 8. Aufgabe

  Beantworte folgende Fragen:

  1. Was ist ein Tag in Docker und wofür wird er verwendet?
  
  2. Wie sieht die allgemeine Syntax eines Docker-Images mit Tag aus? Gib ein Beispiel.
  
  3. Was passiert, wenn man ein Image ohne Tag startet, z.B. `docker run nginx`?
  
  4. Warum ist der Tag `latest` problematisch in produktiven Umgebungen?
  
  5. Was versteht man unter "Digest-Pinning"?
  
  6. Wie unterscheidet sich der  Digest von einem Tag?
  
  7. Welche Vorteile bietet es, feste Versions-Tags z.B. `python:3.11` zu verwenden?
  
  8. Ein Update des Images `node:latest` hat deinen Code plötzlich funktionsunfähig gemacht. Was hätte man im Voraus tun können, um das zu vermeiden?

solution:  |
